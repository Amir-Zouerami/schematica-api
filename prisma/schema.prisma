generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(cuid())
  username     String  @unique
  password     String
  role         Role    @default(member)
  profileImage String?

  tokenVersion Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  teamMemberships TeamMembership[]

  // "Blame" relations for tracking creation/updates
  createdProjects  Project[]  @relation("ProjectCreator")
  updatedProjects  Project[]  @relation("ProjectUpdater")
  createdEndpoints Endpoint[] @relation("EndpointCreator")
  updatedEndpoints Endpoint[] @relation("EndpointUpdater")
  writtenNotes     Note[]

  // Access control relations
  projectAccesses UserProjectAccess[]
  deniedProjects  Project[]           @relation("DeniedProjectAccess")
}

model Team {
  id        String   @id @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members         TeamMembership[]
  projectAccesses TeamProjectAccess[]
}

model TeamMembership {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  @@id([userId, teamId])
}

model Project {
  id             String   @id @default(cuid())
  name           String
  nameNormalized String   @unique
  description    String?
  serverUrl      String?
  creator        User     @relation("ProjectCreator", fields: [creatorId], references: [id], onDelete: Restrict)
  creatorId      String
  updatedBy      User     @relation("ProjectUpdater", fields: [updatedById], references: [id], onDelete: Restrict)
  updatedById    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  links     ProjectLink[]
  endpoints Endpoint[]

  userAccesses UserProjectAccess[]
  teamAccesses TeamProjectAccess[]
  deniedUsers  User[]              @relation("DeniedProjectAccess")
}

model ProjectLink {
  id        Int     @id @default(autoincrement())
  name      String
  url       String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([projectId, url])
}

model Endpoint {
  id     String @id @default(cuid())
  path   String
  method String

  operation Json
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  creator     User     @relation("EndpointCreator", fields: [creatorId], references: [id], onDelete: Restrict)
  creatorId   String
  updatedBy   User     @relation("EndpointUpdater", fields: [updatedById], references: [id], onDelete: Restrict)
  updatedById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  notes Note[]

  @@unique([projectId, path, method])
}

model Note {
  id         Int      @id @default(autoincrement())
  content    String
  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  endpointId String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// --- Access Control Tables ---
model UserProjectAccess {
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  type      AccessType // "OWNER" or "VIEWER"

  @@id([userId, projectId])
}

model TeamProjectAccess {
  team      Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  type      AccessType // "OWNER" or "VIEWER"

  @@id([teamId, projectId])
}

enum Role {
  admin
  member
}

enum AccessType {
  OWNER
  VIEWER
}
